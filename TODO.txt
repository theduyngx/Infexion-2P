Evaluation function (ordered by priority):
  1. Material / Power: Essentially RED - BLUE
  2. Clusters

Clusters (ordered by priority):
  1. Ordered by cluster size
  2. Ordered by number of clusters
  3. There must be a certain point, depending on the board's state, that maximizes
     the benefit between cluster size and number of clusters

Said context of the state:
  This is entirely dictated by the dominance factor of each side's clusters
  1. Check for each adjacent clusters of opposing sides, which cluster is bigger
  2. Second priority is the power of the pieces within the cluster
  Once again, there should be a mathematical balance between the pieces' stack powers
  and the cluster size it is in.
  
--> From this, we can conclude that:
  -  It is generally better to have bigger clusters than to have more clusters. Although
     this should be dictated by the dominance factor of the state.
  -  The dominance factor should be that: bigger clusters are generally better than small
     sized ones. Although some small size with large stack values should be a second priority
     to consider.
     Therefore, it is not necessarily better to have bigger clusters. But sometimes, bigger
     clusters can still be dominated by slightly smaller clusters with large stack pieces.
    
  -  Therefore, a move is considered good if it can, first and foremost, capture an opposition
     piece. But how much better, or even worse, will then be checked by the effect the most has
     on the state's clusters.
     +  If our cluster will grow in size, it is also perhaps a good move
     +  If the opposition's clusters decrease in size, and that it divides the cluster up, it
        could also be a good move.
     +  In general, though, this is a balance act and the calculation should show that much.
        It is not always assured that a specific aspect being changed will necessarily always
        lead to a better result, but the general score deduced from all these factors will be
        the end-of-all.


---------------------------------------------------------------------------------------

CLUSTERS:
So far the calculation we've come up is:
     Cluster size ^ 1.4  +  Number of clusters * 1.2

Punishable factor is dominance factor:
     Red dominance - Blue dominance

Dominance factor calculation:
     for each adjacent opposing clusters:
         RED:(Balance of cluster size & cluster total power) - BLUE:(same)
  
Balance of cluster size & cluster total power:
     Probably just do the same as the cluster size and number of clusters balance thing.
     But it is even less desirable to have great values in small clusters in this case.


To run the program within Pycharm IDE:
  1. Edit Configuration
  2. Choose Target to run -> Module name -> "referee"
  3. Parameters: agent agent -s -t (-v if verbose)
  4. Working directory: .../AI-part-B/
     NOTE: not .../AI-part-B/referee
  5. Tick "Emulate terminal in output console"

Space remaining UNIX issue:
  - Go to agent/board.py
  - Go to __getitem__ method in Board class
  - Every time space remaining stops appearing, comment in/out the piece of code:
        if cell in self._state:
            pass
    For whatever reason, this piece of code could make the space remaining re-appears.
